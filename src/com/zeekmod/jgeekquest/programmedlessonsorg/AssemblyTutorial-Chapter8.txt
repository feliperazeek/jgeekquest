http://programmedlessons.org/AssemblyTutorial/Chapter-08/ass08_9.html

A=10, B=11, C=12, D=13, E=14, F=15, 
0F4A = 0 15 4 10 	= 0000 1111 0100 1010
420B = 4 2 0 11 = 0100 0010 0000 1011
0101 0001 0101 0101 = 0x5155

1101 0010
0110 1101 + 
0011 1111 (overflow)

http://programmedlessons.org/AssemblyTutorial/Chapter-08/ass08_11.html
Let us say that you need to represent an equal number of positive and negative integers in eight bits. How many negative numbers can represented? How many positive numbers?
Just for fun, can you think of a way to do this? Get out some scratch paper and scratch for a while with eight-bit patterns.
128 for positive - 128 for negative since the first bit is used for the sign = 0 for positive, 1 for negative

http://programmedlessons.org/AssemblyTutorial/Chapter-08/ass08_12.html
With 8-bit sign-magnitude representation, what positive integers can be represented and what negative integers can be represented?

1111 1111 = negative 	= - ((64 + 32 + 16) + (8 + 4 + 2 + 1))  = -127
0111 1111 = positive	= + ((64 + 32 + 16) + (8 + 4 + 2 + 1)) 	= +127


http://programmedlessons.org/AssemblyTutorial/Chapter-08/ass08_13.html


Two Complement
http://programmedlessons.org/AssemblyTutorial/Chapter-08/ass08_17.html
How to Construct the Negative of an Integer in Two's Complement:
Start with an N-bit representation of an integer.

To calculate the N-bit representation of the negative integer:

Reflect each bit of the bit pattern (change 0 to 1, and 1 to 0).
Add one.

What is the two's complement of 0100 0111?
1011 1001



http://programmedlessons.org/AssemblyTutorial/Chapter-08/ass08_22.html
Be sure that you understand This: it is by happy coincidence that the high order bit of a two's complement integer is 0 for positive and 1 for negative. But, to create the two's complement representation of the negative of a number you must "reflect, add one". Changing the sign bit by itself will not work.

To convert N bits of two's complement representation into decimal representation:

If the integer is negative, complement it to get a positive integer.
Convert (positive) integer to decimal (as usual).
If the integer was originally negative, put "-" in front of the decimal representation.
The number represented by 1001 is negative (since the "sign bit" is one), so complement:

 1001 ->  0110 + 1  -> 0111

What is the decimal representation of this 8-bit two's complement integer: 1001 1111
0110 0001 =  0110 is 96 0001 is 1 = -97